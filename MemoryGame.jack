class MemoryGame {
    field Array cards;        // Array to store card values
    field Array revealed;     // Array to track revealed state
    field Array matched;      // Array to track matched pairs
    field int firstCard;      // Index of first selected card
    field int secondCard;     // Index of second selected card
    field boolean gameOver;   // Game over flag
    field Random rnd;         // Random number generator
    
    // Constructor
    constructor MemoryGame new() {
        var int i, j, temp, randIndex;
        var Array tempArray;
        
        // Initialize arrays
        let cards = Array.new(16);
        let revealed = Array.new(16);
        let matched = Array.new(16);
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        let rnd = Random.new();
        
        // Initialize card values (1-8, each twice)
        let tempArray = Array.new(16);
        let i = 0;
        while (i < 8) {
            let tempArray[i*2] = i + 1;
            let tempArray[i*2 + 1] = i + 1;
            let i = i + 1;
        }
        
        // Shuffle cards using Fisher-Yates algorithm
        let i = 15;
        while (i > 0) {
            let randIndex = rnd.randRange(i + 1);
            // Swap elements
            let temp = tempArray[i];
            let tempArray[i] = tempArray[randIndex];
            let tempArray[randIndex] = temp;
            let i = i - 1;
        }
        
        // Copy shuffled array to cards array
        let i = 0;
        while (i < 16) {
            let cards[i] = tempArray[i];
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        
        do tempArray.dispose();
        return this;
    }
    
    // Method to draw the game board
    method void drawBoard() {
        var int i, row, col, value;
        do Screen.clearScreen();
        
        let i = 0;
        while (i < 16) {
            let row = i / 4;
            let col = Math.multiply(i - Math.multiply(row, 4), 100);
            let row = Math.multiply(row, 100);
            
            do Screen.drawRectangle(col, row, col + 80, row + 80);
            
            if (revealed[i] | matched[i]) {
                let value = cards[i];
                do Output.moveCursor(row/11 + 1, col/8 + 2);
                do Output.printInt(value);
            }
            
            let i = i + 1;
        }
        return;
    }
    
    // Method to handle card selection
    method void selectCard(int index) {
        if (~revealed[index] & ~matched[index]) {
            if (firstCard = -1) {
                let firstCard = index;
                let revealed[index] = true;
            } else {
                if (~(firstCard = index)) {
                    let secondCard = index;
                    let revealed[index] = true;
                    do checkMatch();
                }
            }
            do drawBoard();
        }
        return;
    }
    
    // Method to check if selected cards match
    method void checkMatch() {
        var int i;
        
        if (cards[firstCard] = cards[secondCard]) {
            let matched[firstCard] = true;
            let matched[secondCard] = true;
            
            // Check if game is over
            let gameOver = true;
            let i = 0;
            while (i < 16) {
                if (~matched[i]) {
                    let gameOver = false;
                }
                let i = i + 1;
            }
        }
        
        // Reset selections
        do Sys.wait(500);  // Wait to show cards
        let revealed[firstCard] = false;
        let revealed[secondCard] = false;
        let firstCard = -1;
        let secondCard = -1;
        
        if (~(cards[firstCard] = cards[secondCard])) {
            do drawBoard();
        }
        return;
    }
    
    // Method to check if game is over
    method boolean isGameOver() {
        return gameOver;
    }
    
    // Dispose method
    method void dispose() {
        do cards.dispose();
        do revealed.dispose();
        do matched.dispose();
        do rnd.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
class MemoryGame {
    field Array cards;
    field Array revealed;
    field Array matched;
    field int firstCard;
    field int secondCard;
    field boolean gameOver;
    field Random rnd;
    
    constructor MemoryGame new() {
        var int i, j, temp, randIndex;
        var Array tempArray;
        
        let cards = Array.new(16);
        let revealed = Array.new(16);
        let matched = Array.new(16);
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        let rnd = Random.new();
        
        let tempArray = Array.new(16);
        let i = 0;
        while (i < 8) {
            let tempArray[i*2] = i + 1;
            let tempArray[i*2 + 1] = i + 1;
            let i = i + 1;
        }
        
        let i = 15;
        while (i > 0) {
            let randIndex = rnd.randRange(i + 1);
            let temp = tempArray[i];
            let tempArray[i] = tempArray[randIndex];
            let tempArray[randIndex] = temp;
            let i = i - 1;
        }
        
        let i = 0;
        while (i < 16) {
            let cards[i] = tempArray[i];
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        
        do tempArray.dispose();
        return this;
    }
    
    method void drawBoard() {
        var int i, row, col, value;
        var int cardWidth, cardHeight, spacing;
        
        do Screen.clearScreen();
        
        let cardWidth = 40;
        let cardHeight = 40;
        let spacing = 10;
        
        // Draw title
        do Output.moveCursor(0, 0);
        do Output.printString("Memory Game");
        
        let i = 0;
        while (i < 16) {
            let row = i / 4;
            let col = i - (Math.multiply(row, 4));
            
            let col = Math.multiply(col, (cardWidth + spacing)) + spacing;
            let row = Math.multiply(row, (cardHeight + spacing)) + spacing + 20; // Added offset for title
            
            do Screen.drawRectangle(col, row, col + cardWidth, row + cardHeight);
            
            if (revealed[i] | matched[i]) {
                let value = cards[i];
                // Calculate text position based on card position
                do Output.moveCursor((row / 11) + 2, (col / 8) + 1);
                do Output.printInt(value);
            }
            
            let i = i + 1;
        }
        
        // Draw instructions at bottom of screen
        do Output.moveCursor(20, 0);
        do Output.printString("Space: Select card (0-15)");
        do Output.moveCursor(21, 0);
        do Output.printString("Q: Quit game");
        
        return;
    }
    
    method void showMessage(String message) {
        do Output.moveCursor(18, 0);
        do Output.printString(message);
        return;
    }
    
    method void selectCard(int index) {
        if ((index > -1) & (index < 16)) {
            if (~revealed[index] & ~matched[index]) {
                if (firstCard = -1) {
                    let firstCard = index;
                    let revealed[index] = true;
                    do showMessage("Select second card");
                } else {
                    if (~(firstCard = index)) {
                        let secondCard = index;
                        let revealed[index] = true;
                        do checkMatch();
                    }
                }
                do drawBoard();
            }
        }
        return;
    }
    
    method void checkMatch() {
        var int i;
        
        if (cards[firstCard] = cards[secondCard]) {
            let matched[firstCard] = true;
            let matched[secondCard] = true;
            do showMessage("Match found!");
            
            let gameOver = true;
            let i = 0;
            while (i < 16) {
                if (~matched[i]) {
                    let gameOver = false;
                }
                let i = i + 1;
            }
        } else {
            do showMessage("No match. Try again!");
        }
        
        do Sys.wait(1000);
        
        if (~(cards[firstCard] = cards[secondCard])) {
            let revealed[firstCard] = false;
            let revealed[secondCard] = false;
        }
        let firstCard = -1;
        let secondCard = -1;
        
        do drawBoard();
        return;
    }
    
    method boolean isGameOver() {
        return gameOver;
    }
    
    method void dispose() {
        do cards.dispose();
        do revealed.dispose();
        do matched.dispose();
        do rnd.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
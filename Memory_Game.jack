class Memory_Game {
    field Array cards;        
    field Array revealed;     
    field Array matched;      
    field int cursorX, cursorY;  
    field int moves;         
    field int firstCard;    
    field int secondCard;    
    field boolean gameOver;  
    field boolean waitingForDelay; 

    constructor Memory_Game new() {
        let cards = Array.new(16);      
        let revealed = Array.new(16);    
        let matched = Array.new(16);     
        let cursorX = 0;
        let cursorY = 0;
        let moves = 0;
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        let waitingForDelay = false;
        
        do Random.init();  
        do initializeArrays();
        do initializeCards();
        do draw();
        return this;
    }

    method void initializeArrays() {
        var int i;
        let i = 0;
        while (i < 16) {
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        return;
    }

    method void initializeCards() {
        var int i, j, temp, randPos;
        let i = 0;
        while (i < 8) {
            let cards[i] = i + 1;
            let cards[i + 8] = i + 1;
            let i = i + 1;
        }
        let i = 0;
        while (i < 15) {
            let randPos = Random.randRange(15 - i) + i;
            let temp = cards[i];
            let cards[i] = cards[randPos];
            let cards[randPos] = temp;
            let i = i + 1;
        }
        return;
    }

    method void handleInput(char key) {
        if (waitingForDelay) { return; }
        if (key = 87 | key = 119) { do moveUp(); }    
        if (key = 83 | key = 115) { do moveDown(); }  
        if (key = 65 | key = 97)  { do moveLeft(); }  
        if (key = 68 | key = 100) { do moveRight(); }
        if (key = 32) { do flipCard(); } 
        do draw();
        return;
    }

    method void moveUp() {
        if (cursorY > 0) {
            let cursorY = cursorY - 1;
        }
        return;
    }

    method void moveDown() {
        if (cursorY < 3) {
            let cursorY = cursorY + 1;
        }
        return;
    }

    method void moveLeft() {
        if (cursorX > 0) {
            let cursorX = cursorX - 1;
        }
        return;
    }

    method void moveRight() {
        if (cursorX < 3) {
            let cursorX = cursorX + 1;
        }
        return;
    }

    method void flipCard() {
        var int index;
        let index = (cursorY * 4) + cursorX;
        
        if (matched[index] | revealed[index]) {
            return;
        }
        
        if (firstCard = -1) {
            let firstCard = index;
            let revealed[index] = true;
        } else {
            if (secondCard = -1) {
                let secondCard = index;
                let revealed[index] = true;
                let moves = moves + 1;
                let waitingForDelay = true; 
                do checkMatch();
            }
        }
        return;
    }

    method void checkMatch() {
        if (cards[firstCard] = cards[secondCard]) {
            do Output.moveCursor(21, 0);
            // do Output.printString("Yea! Found a match!");
            let matched[firstCard] = true;
            let matched[secondCard] = true;
            let firstCard = -1;
            let secondCard = -1;
            let waitingForDelay = false;
            if (isGameOver()) {
                let gameOver = true;
                // do showScore();
                do restart();
            }
        } else {
            do Output.moveCursor(21, 0);
            // do Output.printString("Not a match... ");
            do draw();  
            do Sys.wait(800);  
            let revealed[firstCard] = false;
            let revealed[secondCard] = false;
            let firstCard = -1;
            let secondCard = -1;
            let waitingForDelay = false;
            do Output.moveCursor(21, 0);
            do Output.printString("                   "); 
        }
        return;
    }

    method boolean isGameOver() {
        var int i;
        let i = 0;
        while (i < 16) {
            if (~matched[i]) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    // method void showScore() {
    //     // do Output.moveCursor(20, 0);
    //     do Output.printString("Game Over! Total moves: ");
    //     do Output.printInt(moves);
    //     do Output.println();
    //     return;
    // }

    method void restart() {
        var int i;
        let i = 0;
        while (i < 16) {
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        do initializeCards();
        let moves = 0;
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        let cursorX = 0;
        let cursorY = 0;
        let waitingForDelay = false;
        return;
    }

    
    method void draw() {
        var int i, x, y, value;
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
        do Output.printString("W/A/S/D - Move");
        do Output.moveCursor(1, 0);
        do Output.printString("SPACE - Flip");
        do Output.moveCursor(2, 0);
        do Output.printString("Q - Quit");
        
        let i = 0;
        while (i < 16) {
            let x = (i - ((i / 4) * 4)) * 50 + 10;
            let y = (i / 4) * 50 + 50;
            if (matched[i]) {
                do Screen.setColor(true);
                do Screen.drawRectangle(x, y, x + 40, y + 40);
            } else {
                do Screen.setColor(true);
                do Screen.drawRectangle(x, y, x + 40, y + 40);
                do Screen.setColor(false);
                do Screen.drawRectangle(x + 2, y + 2, x + 38, y + 38);
                if (revealed[i]) {
                    let value = cards[i];
                    do Output.moveCursor((y + 20)/11, (x + 20)/8);
                    do Output.printInt(value);
                }
            }
            let i = i + 1;
        }
        
        let i = (cursorY * 4) + cursorX;
        if (~matched[i]) {
            let x = cursorX * 50 + 10;
            let y = cursorY * 50 + 50;
            do Screen.setColor(true);
            do Screen.drawRectangle(x - 2, y - 2, x + 42, y);  
            do Screen.drawRectangle(x - 2, y + 40, x + 42, y + 42);  
            do Screen.drawRectangle(x - 2, y, x, y + 40);  
            do Screen.drawRectangle(x + 40, y, x + 42, y + 40);  
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(cards);
        do Memory.deAlloc(revealed);
        do Memory.deAlloc(matched);
        do Memory.deAlloc(this);
        return;
    }
}
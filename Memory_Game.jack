// File: Memory_Game.jack
class Memory_Game {
    field Array cards;        // Array to store card values
    field Array revealed;     // Array to track revealed cards
    field Array matched;      // Array to track matched cards
    field int cursorX, cursorY;  // Cursor position
    field int moves;         // Number of moves made
    field int firstCard;     // Index of first revealed card
    field int secondCard;    // Index of second revealed card
    field boolean gameOver;  // Game state

    /** Constructor */
    constructor Memory_Game new() {
        do Random.init();  // Initialize random number generator
        let cards = Array.new(16);      // Create 16 cards
        let revealed = Array.new(16);    // Track revealed status
        let matched = Array.new(16);     // Track matched status
        let cursorX = 0;
        let cursorY = 0;
        let moves = 0;
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        
        // Initialize arrays
        do initializeArrays();
        do initializeCards();
        // Draw initial board
        do draw();
        return this;
    }

    /** Initialize arrays */
    method void initializeArrays() {
        var int i;
        let i = 0;
        while (i < 16) {
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Initialize cards with pairs of numbers 1-8 */
    method void initializeCards() {
        var Array numbers;
        var int i, rand, temp;
        
        let numbers = Array.new(16);
        // Fill array with pairs of numbers 1-8
        let i = 0;
        while (i < 8) {
            let numbers[i] = i + 1;
            let numbers[i + 8] = i + 1;
            let i = i + 1;
        }
        
        // Shuffle array using Fisher-Yates algorithm
        let i = 15;
        while (i > 0) {
            let rand = Random.randRange(i + 1);
            let temp = numbers[i];
            let numbers[i] = numbers[rand];
            let numbers[rand] = temp;
            let i = i - 1;
        }
        
        let cards = numbers;
        return;
    }

    /** Handle keyboard input */
    method void handleInput(char key) {
        if (key = 87) { do moveUp(); }    // W
        if (key = 83) { do moveDown(); }  // S
        if (key = 65) { do moveLeft(); }  // A
        if (key = 68) { do moveRight(); } // D
        if (key = 32) { do flipCard(); }  // Space
        
        // Redraw after any input
        do draw();
        return;
    }

    /** Move cursor up */
    method void moveUp() {
        if (cursorY > 0) {
            let cursorY = cursorY - 1;
        }
        return;
    }

    /** Move cursor down */
    method void moveDown() {
        if (cursorY < 3) {
            let cursorY = cursorY + 1;
        }
        return;
    }

    /** Move cursor left */
    method void moveLeft() {
        if (cursorX > 0) {
            let cursorX = cursorX - 1;
        }
        return;
    }

    /** Move cursor right */
    method void moveRight() {
        if (cursorX < 3) {
            let cursorX = cursorX + 1;
        }
        return;
    }

    /** Flip card at cursor position */
    method void flipCard() {
        var int index;
        let index = (cursorY * 4) + cursorX;
        
        // Check if card is already matched or revealed
        if (matched[index] | revealed[index]) {
            return;
        }
        
        if (firstCard = -1) {
            let firstCard = index;
            let revealed[index] = true;
        } else {
            if (secondCard = -1) {
                let secondCard = index;
                let revealed[index] = true;
                let moves = moves + 1;
                do checkMatch();
            }
        }
        return;
    }

    /** Check if revealed cards match */
    method void checkMatch() {
        if (cards[firstCard] = cards[secondCard]) {
            do Output.printString("Yea!");
            let matched[firstCard] = true;
            let matched[secondCard] = true;
            // Check if game is over
            if (isGameOver()) {
                let gameOver = true;
                do showScore();
                do restart();
            }
        } else {
            // Hide cards after a delay
            do Sys.wait(1000);
            let revealed[firstCard] = false;
            let revealed[secondCard] = false;
        }
        let firstCard = -1;
        let secondCard = -1;
        return;
    }

    /** Check if all cards are matched */
    method boolean isGameOver() {
        var int i;
        let i = 0;
        while (i < 16) {
            if (~matched[i]) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    /** Show score */
    method void showScore() {
        do Output.moveCursor(20, 0);
        do Output.printString("Game Over! Moves: ");
        do Output.printInt(moves);
        do Output.println();
        return;
    }

    /** Restart game */
    method void restart() {
        var int i;
        let i = 0;
        do initializeCards();
        let moves = 0;
        let firstCard = -1;
        let secondCard = -1;
        let gameOver = false;
        let cursorX = 0;
        let cursorY = 0;
        
        while (i < 16) {
            let revealed[i] = false;
            let matched[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Dispose of memory */
    method void dispose() {
        do cards.dispose();
        do revealed.dispose();
        do matched.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Draw game board */
    method void draw() {
        var int i, x, y, value;
        
        // Clear screen first
        do Screen.clearScreen();
        
        // Draw instructions
        do Output.moveCursor(0, 0);
        do Output.printString("W/A/S/D - Move");
        do Output.moveCursor(1, 0);
        do Output.printString("SPACE - Flip");
        do Output.moveCursor(2, 0);
        do Output.printString("Q - Quit");
        
        let i = 0;
        while (i < 16) {
            let x = (i - ((i / 4) * 4)) * 50 + 10;
            let y = (i / 4) * 50 + 50;  // Moved down to make room for instructions
            
            // Draw card background
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 40, y + 40);
            
            // Draw card content
            if (matched[i]) {
                do Screen.setColor(false);
                do Screen.drawRectangle(x + 2, y + 2, x + 38, y + 38);
            } else {
                do Screen.setColor(false);
                do Screen.drawRectangle(x + 2, y + 2, x + 38, y + 38);
                
                if (revealed[i]) {
                    let value = cards[i];
                    do Output.moveCursor((y + 20)/11, (x + 20)/8);
                    do Output.printInt(value);
                }
            }
            let i = i + 1;
        }
        
        // Draw cursor (larger and more visible)
        let x = cursorX * 50 + 10;
        let y = cursorY * 50 + 50;
        do Screen.setColor(true);
        // Draw cursor border
        do Screen.drawRectangle(x - 2, y - 2, x + 42, y);  // Top
        do Screen.drawRectangle(x - 2, y + 40, x + 42, y + 42);  // Bottom
        do Screen.drawRectangle(x - 2, y, x, y + 40);  // Left
        do Screen.drawRectangle(x + 40, y, x + 42, y + 40);  // Right
        
        return;
    }
}